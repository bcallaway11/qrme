// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fyxC
double fyxC(double y, arma::mat betmat, arma::colvec X, NumericVector tau);
RcppExport SEXP _qrme_fyxC(SEXP ySEXP, SEXP betmatSEXP, SEXP XSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fyxC(y, betmat, X, tau));
    return rcpp_result_gen;
END_RCPP
}
// fvC
double fvC(double v, int m, NumericVector pi, NumericVector mu, NumericVector sig);
RcppExport SEXP _qrme_fvC(SEXP vSEXP, SEXP mSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(fvC(v, m, pi, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// fvyxC
double fvyxC(double v, arma::mat betmat, int m, NumericVector pi, NumericVector mu, NumericVector sig, double y, arma::colvec x, NumericVector tau);
RcppExport SEXP _qrme_fvyxC(SEXP vSEXP, SEXP betmatSEXP, SEXP mSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP ySEXP, SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fvyxC(v, betmat, m, pi, mu, sig, y, x, tau));
    return rcpp_result_gen;
END_RCPP
}
// mh_mcmc_innerC
NumericVector mh_mcmc_innerC(double startval, int iters, int burnin, double drawsd, arma::mat betmat, int m, NumericVector pi, NumericVector mu, NumericVector sig, double y, arma::mat x, NumericVector tau);
RcppExport SEXP _qrme_mh_mcmc_innerC(SEXP startvalSEXP, SEXP itersSEXP, SEXP burninSEXP, SEXP drawsdSEXP, SEXP betmatSEXP, SEXP mSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP ySEXP, SEXP xSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type startval(startvalSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type drawsd(drawsdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(mh_mcmc_innerC(startval, iters, burnin, drawsd, betmat, m, pi, mu, sig, y, x, tau));
    return rcpp_result_gen;
END_RCPP
}
// imp_sampC
// return a vector of weights to be used in importance sampling // note that, unlike mh_mcmcC, here the measurement error vector // has already been drawn and all we need to do is compute weights NumericVector imp_sampC(NumericVector Y, arma::mat X, NumericVector V, double iters, double drawsd, arma::mat betmat, int m, NumericVector pi, NumericVector mu, NumericVector sig, NumericVector tau);
RcppExport SEXP _qrme_imp_sampC(SEXP YSEXP, SEXP XSEXP, SEXP VSEXP, SEXP itersSEXP, SEXP drawsdSEXP, SEXP betmatSEXP, SEXP mSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type drawsd(drawsdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(imp_sampC(Y, X, V, iters, drawsd, betmat, m, pi, mu, sig, tau));
    return rcpp_result_gen;
END_RCPP
}
// mh_mcmcC
std::vector<double> mh_mcmcC(NumericVector Y, arma::mat X, double startval, int iters, int burnin, double drawsd, arma::mat betmat, int m, NumericVector pi, NumericVector mu, NumericVector sig, NumericVector tau);
RcppExport SEXP _qrme_mh_mcmcC(SEXP YSEXP, SEXP XSEXP, SEXP startvalSEXP, SEXP itersSEXP, SEXP burninSEXP, SEXP drawsdSEXP, SEXP betmatSEXP, SEXP mSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type startval(startvalSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< double >::type drawsd(drawsdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(mh_mcmcC(Y, X, startval, iters, burnin, drawsd, betmat, m, pi, mu, sig, tau));
    return rcpp_result_gen;
END_RCPP
}
// fYXmatC
arma::mat fYXmatC(NumericVector Y, arma::mat betmat, arma::mat X, NumericVector tau);
RcppExport SEXP _qrme_fYXmatC(SEXP YSEXP, SEXP betmatSEXP, SEXP XSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betmat(betmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fYXmatC(Y, betmat, X, tau));
    return rcpp_result_gen;
END_RCPP
}
// interpolateC
double interpolateC(std::vector<double> x, std::vector<double> y, double xval, bool extrapolate);
RcppExport SEXP _qrme_interpolateC(SEXP xSEXP, SEXP ySEXP, SEXP xvalSEXP, SEXP extrapolateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< bool >::type extrapolate(extrapolateSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateC(x, y, xval, extrapolate));
    return rcpp_result_gen;
END_RCPP
}
// interpolateMatC
NumericVector interpolateMatC(std::vector<double> x, arma::mat ymat, double xval, bool extrapolate);
RcppExport SEXP _qrme_interpolateMatC(SEXP xSEXP, SEXP ymatSEXP, SEXP xvalSEXP, SEXP extrapolateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< double >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< bool >::type extrapolate(extrapolateSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateMatC(x, ymat, xval, extrapolate));
    return rcpp_result_gen;
END_RCPP
}
// computeFytXC
arma::cube computeFytXC(NumericVector yvals, NumericVector tvals, arma::mat Qyxpreds, arma::mat Ftxpreds, std::vector<double> tau, CharacterVector copula, double copParam);
RcppExport SEXP _qrme_computeFytXC(SEXP yvalsSEXP, SEXP tvalsSEXP, SEXP QyxpredsSEXP, SEXP FtxpredsSEXP, SEXP tauSEXP, SEXP copulaSEXP, SEXP copParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yvals(yvalsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tvals(tvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Qyxpreds(QyxpredsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ftxpreds(FtxpredsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type copula(copulaSEXP);
    Rcpp::traits::input_parameter< double >::type copParam(copParamSEXP);
    rcpp_result_gen = Rcpp::wrap(computeFytXC(yvals, tvals, Qyxpreds, Ftxpreds, tau, copula, copParam));
    return rcpp_result_gen;
END_RCPP
}
// testCopula
NumericVector testCopula(std::vector<double> u, std::vector<double> v, double copParam);
RcppExport SEXP _qrme_testCopula(SEXP uSEXP, SEXP vSEXP, SEXP copParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type u(uSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type copParam(copParamSEXP);
    rcpp_result_gen = Rcpp::wrap(testCopula(u, v, copParam));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qrme_fyxC", (DL_FUNC) &_qrme_fyxC, 4},
    {"_qrme_fvC", (DL_FUNC) &_qrme_fvC, 5},
    {"_qrme_fvyxC", (DL_FUNC) &_qrme_fvyxC, 9},
    {"_qrme_mh_mcmc_innerC", (DL_FUNC) &_qrme_mh_mcmc_innerC, 12},
    {"_qrme_imp_sampC", (DL_FUNC) &_qrme_imp_sampC, 11},
    {"_qrme_mh_mcmcC", (DL_FUNC) &_qrme_mh_mcmcC, 12},
    {"_qrme_fYXmatC", (DL_FUNC) &_qrme_fYXmatC, 4},
    {"_qrme_interpolateC", (DL_FUNC) &_qrme_interpolateC, 4},
    {"_qrme_interpolateMatC", (DL_FUNC) &_qrme_interpolateMatC, 4},
    {"_qrme_computeFytXC", (DL_FUNC) &_qrme_computeFytXC, 7},
    {"_qrme_testCopula", (DL_FUNC) &_qrme_testCopula, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_qrme(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
